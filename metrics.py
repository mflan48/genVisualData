"""
A set of calculations of AFD and other typical & extendable eye-tracking metrics
"""

import numpy as np
from math import sqrt

BUG1_TARGETS = \
    ["MineSweeperGui.updateCheat",
     "MineSweeperGui.updateCheat:Comment",
     "MineSweeperGui.resetButtons",
     "MineSweeperGui.resetButtons:Comment"]

BUG2_TARGETS = \
    ["MineSweeperBoard.generateMines(long Space)",
     "MineSweeperBoard.generateMines(long Space):Comment"]

"""
A calculation of AFD (in ms) for a DataFrame of the same form as createCombinedDF.
    Each fixation is processed independently of AOIs

    data: a pandas DataFrame, as generated by createCombinedDf.
    
    period: For a multi-period calculation, specify the number of milleseconds of each period.
        Results will be returned as a list. If period is zero, the average will be taken for the 
        whole DataFrame.
"""
def get_global_afd(data, subdivision=1):
    if subdivision is 0 or subdivision is 1:
        return data["fix_dur"].mean()
    else:
        first_time = data["fix_time"].iloc[0]
        last_time = data["fix_time"].iloc[-1]
        times = np.linspace(float(first_time), float(last_time), num=int(subdivision)+1)

        means = list()

        for i in range(len(times)-1):
            time_1, time_2 = times[i: i+2]
            in_range_cond = np.logical_and(data["fix_time"] >= time_1,
                                           data["fix_time"] < time_2)
            means.append(data.loc[in_range_cond, "fix_dur"].mean())

        return means

"""
Get the AFD for each AOI.
"""
def get_aoi_afd(data):
    unique_aois = data.function.unique()
    aoi_afd = dict()

    for aoi in unique_aois:
        aoi_data = data[data.function == aoi]
        aoi_afd[aoi] = aoi_data["fix_dur"].mean()

    return aoi_afd

"""
Get total fixation count
"""
def get_fixation_count(data):
    return len(data)

"""
Get total fixation count on a particular AOI
"""
def get_aoi_fixation_count(data, func_name):
    return len(data[data.function == func_name])

"""
Get average saccade length
"""
def get_avg_saccade_length(data):
    rows = list(data.iterrows())
    saccade_lengths = list()

    for i in range(len(rows) - 1):
        this_row, next_row = rows[i][1], rows[i+1][1]
        x_diff, y_diff = next_row.pixel_x - this_row.pixel_x, next_row.pixel_y - this_row.pixel_y
        saccade_lengths.append(sqrt(x_diff ** 2 + y_diff ** 2))

    return np.array(saccade_lengths).mean()


"""
Find the time at which some number of fixations on any target area have occurred.

Input: a DataFrame and a list of target functions that match a possible
    name in the DataFrame's 'function' field
"""
def detect_on_target_focus(data, target_functions, num_required):
    sequence = list(data['function'])
    times = list(data['fix_time'])
    found_loc = None

    for i in range(len(sequence) - num_required):
        if any(sequence[i: i+num_required] == [target] * num_required
               for target in target_functions):
            found_loc = i
            break

    if found_loc is not None:
        return times[found_loc]
    else:
        return "Pattern not found!"
